/*
 * File: app/view/role/RoleMangerPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Evcorp.view.orderList.OrderListPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.orderlistpanel',
//    control: {
//        "grid[itemId=contractCarOrderGrid]": {
//        	select: 'onContractCarOrderGridSelect'
//        }
//    },
/* 订单审核 button on */  
    onCollectInfo : function() {
    	var callCarwin = Ext.create({
    		xtype : 'CollectWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },
    onCreditReporting : function() {
    	var callCarwin = Ext.create({
    		xtype : 'CreditReportingWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },
    onTransfers : function() {
    	var callCarwin = Ext.create({
    		xtype : 'TransfersWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },
    onSignedAgreement : function() {
    	var callCarwin = Ext.create({
    		xtype : 'SignedAgreementWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },
    onPayInfo : function() {
    	var callCarwin = Ext.create({
    		xtype : 'PayInfoWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },
    onBuyInsurance : function() {
    	var callCarwin = Ext.create({
    		xtype : 'BuyInsuranceWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },
    onDeliveryCar : function() {
    	var callCarwin = Ext.create({
    		xtype : 'DeliveryCarWin',
    		width : '90%',
    		closeAction : 'destroy'
    	});
    	callCarwin.show();
    },

/* 订单审核 button off */     
	onAddClick : function() {
		var AddPricePanel = Ext.create({
			xtype : 'orderlistwin',
			closeAction : 'destroy'
		});
		var phone = this.lookupReference('phone').getValue();
		AddPricePanel.down('#nameOrPhoneId').setValue(phone);
		AddPricePanel.show();
	},
	onBddClick : function() {
		var AddPricePanel = Ext.create({
			xtype : 'orderlistgoodswin',
			closeAction : 'destroy'
		});
		AddPricePanel.show();
	},
	onAddAttachmentClick : function() {
		var AddPricePanel = Ext.create({
			xtype : 'orderlistattachmentwin',
			closeAction : 'destroy'
		});
		AddPricePanel.show();
	},
	onPayAddClick : function() {
		
		var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		if (seletedGird && seletedGird.length>0) {
			var id = seletedGird[0].get('id');
			if (!id || id<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行新建支付信息操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑订单信息。');
			return;
		}
		
		var contractCarOrderId = seletedGird[0].get('id');
		var contractCarOrderPayLogGrid = this.lookupReference('contractCarOrderPayLogGrid');
        var contractCarOrderPayLogGridStore = contractCarOrderPayLogGrid.getStore(); 
        var newModel = new Evcorp.model.ContractCarOrderPayLog({ id:null, contractCarOrderId:contractCarOrderId });
        contractCarOrderPayLogGridStore.insert(0, newModel);
        contractCarOrderPayLogGrid.getSelectionModel().select(newModel);
		
	},
	// 支付信息保存
	onContractCarOrderPaySaveClick : function(grid, rowIndex) {

	  var contractCarOrderPayLogGridStore = grid.getStore();
      
      var rec = contractCarOrderPayLogGridStore.getAt(rowIndex);
      var id = rec.get('id');
      var contractCarOrderId = rec.get('contractCarOrderId');
      var payNo = Ext.util.Format.trim(rec.get('payNo'));
      var payType = Ext.util.Format.trim(rec.get('payType'));
      var payChannel = Ext.util.Format.trim(rec.get('payChannel'));
      var payAmount = rec.get('payAmount');
      var payTime = rec.get('payTime');
      var remark = Ext.util.Format.trim(rec.get('remark'));
      if (!contractCarOrderId) {
      	Ext.Msg.alert("提示",'请先选择或新建一条订单记录后再编辑支付信息。');
      	return;
      }
      if (!payNo || !payType || !payChannel || !payAmount || !payTime) {
      	Ext.Msg.alert("提示",'请输入合法支付信息！');
      	return;
      }
      payTime = Ext.util.Format.date(payTime, 'Y-m-d');
      // 新增、修改操作
      Ext.Ajax.request({
			url : 'ccOrder/saveOrUpdateContractCarOrderPayLog',
			params : {
				"id":id,
				"payNo":payNo,
				"payType":payType,
				"payChannel":payChannel,
				"payAmount":payAmount,
				"payTime":payTime,
				"remark":remark,
				"contractCarOrderId":contractCarOrderId
			},
			async : false,
			success : function(response) {
				if(response.status==200 && response.statusText=='OK'){
					var result = JSON.parse(response.responseText);
					var type = result.type;
					var errorMsg = result.errorMsg;
					if (errorMsg) {
						Ext.Msg.alert("提示", errorMsg);
					} else {
						if (type < 0) {
							Ext.Msg.alert("提示","新增成功！")
						} else {
							Ext.Msg.alert("提示","修改成功！")
						}
						contractCarOrderPayLogGridStore.reload();
					}
				}else{
	          		Ext.Msg.alert("提示","系统错误,操作失败!");
	          	}
			}
      });
	},
	// 支付信息删除
	onContractCarOrderPayRemoveClick : function(grid, rowIndex) {
        var contractCarOrderPayLogGridStore = grid.getStore();
        
        var rec = contractCarOrderPayLogGridStore.getAt(rowIndex);
        var id = rec.get('id');
        var contractCarOrderId = rec.get('contractCarOrderId');
        if (!contractCarOrderId) {
        	Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑支付信息。');
        	return;
        }
    	if (id && id>=0) {
    		Ext.MessageBox.confirm('提示', '确定删除该记录?', function(btn) {
				if (btn != 'yes') {
					return;
				}
				// 删除操作
				Ext.Ajax.request({
					url : 'ccOrder/deleteContractCarOrderPayLog',
					params : {
						'contractCarOrderPayLogId' : id,
					},
					async : false,
					success : function(response) {
						if(response.status==200 && response.statusText=='OK'){
							Ext.Msg.alert("提示","删除成功！")
							contractCarOrderPayLogGridStore.reload();
						}else{
	                		Ext.Msg.alert("提示","系统错误,操作失败!");
	                	}
					}
				});
			});
    	} else {
    		contractCarOrderPayLogGridStore.removeAt(rowIndex);
    	}
	},
	
	// 上传支付信息附件
	onUploadContractCarOrderPayClick : function (grid, rowIndex) {
    	var ccsaGridStore = grid.getStore();
        var rec = ccsaGridStore.getAt(rowIndex);
        var id = rec.get('id');
        var payNo = rec.get('payNo');
        if (!id || id<0) {
        	Ext.Msg.alert('提示','请先保存补充协议后再进行上传操作！');
        	return;
        }
        if (!payNo) {
        	Ext.Msg.alert('提示','支付编码为空，无法进行上传操作！');
        	return;
        }
    	var businessKey = payNo; // 附件业务实体编号：支付编号
    	var businessType = 'attachBizEntityType_ZFXX'; // 附件业务实体类型：支付类型代码
    	var businessTypeName = '支付信息'; // 附件业务实体类型名称：支付类型（理论上从字典表去nameCn字段）
    	
    	var uploadAttachmenWin = Ext.create({
			xtype:'UploadAttachmentWin',
			width : 800,
			height : '60%',
			businessKey:businessKey,
			businessType:businessType,
			businessTypeName:businessTypeName,
			closeAction : 'destroy'
		});
		var uploadAttachmentPanel = uploadAttachmenWin.down('#uploadAttachmentPanelItemId');// 附件Panel
		uploadAttachmentPanel.setTitle('');
		uploadAttachmenWin.show();
    },
    
	// 新建订单
	onContractCarOrderAddClick : function() {
		var ccOrderGrid = Ext.ComponentQuery.query("viewport orderlistpanel grid")[0];
        var detailForm = this.lookupReference('contractCarOrderDetailForm');
        var ccOrderStore = ccOrderGrid.getStore(); 
        var rec = new Evcorp.model.AuUser({
        	id:-1,
        	valid: true,
        	status: '1',
        	});
        ccOrderStore.insert(0,rec);
        
        ccOrderGrid.getSelectionModel().select(rec);
//        var username = detailForm.down("textfield[name=orderNo]");
//        username.focus(true, true);	
	},
	// 查询订单
	onContractCarOrderQueryClick : function() {
		var queryForm = this.lookupReference('contractCarOrderQueryForm');
	    var listGrid = this.lookupReference('contractCarOrderGrid');
        var extraParams = queryForm.getForm().getValues();
        var dataStore = listGrid.getStore(); 
        
        dataStore.on("beforeload", function (dataStore, operation, eOpts) {
					 Ext.apply(dataStore.proxy.extraParams, extraParams);
					});
        dataStore.loadPage(1,{"start":0,"limit":20});
        listGrid.getSelectionModel().deselectAll();
	},
	onModifyContractCarOrderClick: function () {
		
		var infoGrid = this.lookupReference('contractCarOrderGrid');
    	var gridStore = infoGrid.getStore();
    	if(!infoGrid.getSelectionModel().getSelection()[0]){
    		Ext.Msg.alert('提示','请先新建或选中一条再进行编辑。');
    		return;
    	}
    	var contractCarOrderDetailForm=this.getView().down('#contractCarOrderDetailForm');
		if(!contractCarOrderDetailForm.isValid()){
    		Ext.Msg.alert('提示','提交的字段必输项不能为空。');
    		return;
    	}
		contractCarOrderDetailForm.submit({
    		success: function(form, action){
    				if(action.result.type < 0){
    					Ext.Msg.alert('提示','新建成功！');
    				} else {
    					Ext.Msg.alert('提示','修改成功！');
    				}
    				gridStore.reload({
    					callback: function(){
    						infoGrid.getSelectionModel().select(gridStore.findRecord('id', action.result.id));
    						infoGrid.fireEvent('select')
    						console.log(action.result.id);
    					}
    				});
    		}
    	});
       
	}, 
	
	onContractCarOrderGridSelect : function (grid, record, index) {
		
		var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var contractCarOrderPayLogGrid = this.lookupReference('contractCarOrderPayLogGrid');
		if (!record) {
			record = contractCarOrderGrid.getSelectionModel().getSelection()[0];
		}
    	var contractCarOrderId = record.data.id;
    	
    	
    	if(contractCarOrderId && contractCarOrderId>0){
    		
    		var olPreSaleOrderNo = (record.modified && (typeof record.modified.olPreSaleOrderNo != 'undefined')) ? record.modified.olPreSaleOrderNo : record.data.olPreSaleOrderNo;
        	var customerCode = (record.modified && (typeof record.modified.customerCode != 'undefined')) ? record.modified.customerCode : record.data.customerCode;
        	var status = (record.modified && (typeof record.modified.status != 'undefined')) ? record.modified.status : record.data.status;
    		var cancelContractCarProcessBtn = this.lookupReference('cancelContractCarProcessBtnRef'); // 取消按钮
    		var monthlyManagementFeeRef = this.lookupReference('monthlyManagementFeeRef'); // 保险费用及充电桩使用服务费（元）
    		var chargeFeeRef = this.lookupReference('chargeFeeRef'); // 充电桩费用（元）
    		var financialPackageCode = record.data.financialPackageCode; // 金融套餐
    		var isDisabled = false;
    		// 订单取消或者完成则取消按钮不可用
    		if (status=='99' || status=='14') {
    			isDisabled = true;
    		}
    		cancelContractCarProcessBtn.setDisabled(isDisabled);
    		var contractCarOrderDetailForm = this.lookupReference('contractCarOrderDetailForm');
    		if (financialPackageCode=='cxz_std') {
    			monthlyManagementFeeRef.show();
    			monthlyManagementFeeRef.setDisabled(false);
    			chargeFeeRef.hide();
    			chargeFeeRef.setDisabled(true);
    		} else {
    			monthlyManagementFeeRef.hide();
    			monthlyManagementFeeRef.setDisabled(true);
    			chargeFeeRef.show();
    			chargeFeeRef.setDisabled(false);
    		}
    		
    		// 加载车辆及保险信息
    		var contractCarOrderDetailListStore = this.getViewModel().getStore('contractCarOrderDetailListStore');
    		contractCarOrderDetailListStore.load({
    			params:{ contractCarOrderId: contractCarOrderId  }
    		});
    		
    		// 加载银行卡下拉框，必须放到加载补充协议前面
        	var bankCardInfoStore = this.getView().getViewModel().getStore('bankCardInfoStore');
    		var uploadZXCLAttachmentPanel = this.lookupReference('uploadZXCLAttachmentPanel');
    		var contractCarSuppleAgreementListStore = this.getViewModel().getStore('contractCarSuppleAgreementListStore');
    		bankCardInfoStore.load({
				params:{customerCode:customerCode},
				callback: function(records, options, success){
					// 加载附件补充协议
					contractCarSuppleAgreementListStore.load({
		    	    	params:{ contractCarOrderId: contractCarOrderId, customerCode: customerCode },
		    	    	callback: function(records, options, success){
		    	    		
		    	    		businessKey = [olPreSaleOrderNo]; // 附件业务实体编号：征信材料编号
		    	        	businessType = 'attachBizEntityType_ZXCL'; // 附件业务实体类型：征信材料代码
		    	        	businessTypeName = '征信材料'; // 附件业务实体类型名称：征信材料（理论上从字典表去nameCn字段
		    	    		if(uploadZXCLAttachmentPanel!=null){
		    	    			var attachmentStore = uploadZXCLAttachmentPanel.getViewModel().getStore('attachmentStore');
		    	    			if(attachmentStore!=null){
		    	    				attachmentStore.load({params:{bizEntityCode:businessKey, bizEntityType:businessType}});
		    	    			}
		    	    			var typeStore = uploadZXCLAttachmentPanel.getViewModel().getStore('attachmentTypeStore');
		    	    	    	typeStore.load({params:{type:businessType}});
		    	    	    	var form = uploadZXCLAttachmentPanel.down('form');
		    	    	    	if(form!=null){
		    	    	    		form.getForm().setValues({businessKey:olPreSaleOrderNo,businessType:businessType,businessTypeName:businessTypeName});
		    	    	    	}
		    	    		}
		    	    		
		    	    	},
		        	});
				}
        	});
    		
    		// 加载支付信息pannel
    		var contractCarOrderPayLogListStore = this.getViewModel().getStore('contractCarOrderPayLogListStore');
    		contractCarOrderPayLogListStore.load({
		    	params:{ contractCarOrderId: contractCarOrderId },
	    	});
    		
    	}
    	
    },
    
    orderPayTypeEditor : function (value) {
    	if(value){
    		var gridStore = this.getView().getViewModel().getStore('orderPayTypeStore');
        	return gridStore.findRecord('code', value).data.nameCn;
    	}
    },
    
    orderPayChannelEditor : function (value) {
    	if(value){
    		var gridStore = this.getView().getViewModel().getStore('orderPayChannelStore');
        	return gridStore.findRecord('code', value).data.nameCn;
    	}
    },
    
    // 新增补充协议
    onAddContractCarBCYXtClick : function () {
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		if (!seletedGird || seletedGird.length<=0) {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑订单信息。');
			return;
		}
		
		var contractCarOrderId = seletedGird[0].get('id');
		var olPreSaleOrderNo = (seletedGird[0].modified && (typeof seletedGird[0].modified.olPreSaleOrderNo != 'undefined')) ? seletedGird[0].modified.olPreSaleOrderNo : seletedGird[0].data.olPreSaleOrderNo;
		if (!olPreSaleOrderNo) {
        	Ext.Msg.alert("提示",'租赁合同编号为空或未保存。');
        	return;
        }
    	var contractCarSuppleAgreementGrid = this.lookupReference('contractCarSuppleAgreementGrid');
        var newModel = new Evcorp.model.ContractCarSuppleAgreement({ id:null, contractCarOrderId:contractCarOrderId, olPreSaleOrderNo:olPreSaleOrderNo });
        contractCarSuppleAgreementGrid.getStore().insert(0, newModel);
        contractCarSuppleAgreementGrid.editingPlugin.startEditByPosition({ row: 0, column: 0 });
        contractCarSuppleAgreementGrid.getSelectionModel().select(newModel);
    },
    
    // 保存补充协议
    onSaveContractCarBCYXtClick : function () {
       var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
       var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
       var orderCount = (seletedGird[0].modified && (typeof seletedGird[0].modified.orderCount != 'undefined')) ? seletedGird[0].modified.orderCount : seletedGird[0].data.orderCount;
       
	   var gridStore = this.getView().getViewModel().getStore('contractCarSuppleAgreementListStore');
	   var modifyArray = gridStore.getModifiedRecords();
	   if(modifyArray.length == 0){
		   Ext.Msg.alert('提示','你未进行任何添加或修改操作');
		   return false;
	   } else if (gridStore.data.length>orderCount) {
		   Ext.Msg.alert('提示','补充协议个数不能多于订单数量！');
		   return false;
	   } else {
		   var flag = 0;
		   Ext.each(modifyArray, function(obj,index){
			   if (!obj.get('contractCarOrderId')) {
				   flag = 1;
				   Ext.Msg.alert("提示",'请先选择或新建一条订单记录后再编辑合同补充协议信息。');
				   return false;
			   }
			   if(!obj.get('signDate') || !obj.get('startDate') || !obj.get('endDate') || !obj.get('bankCardInfoId')){
				   flag = 2;
				   Ext.Msg.alert('提示','提交的数据中不能包含空值');
				   return false;
			   }
		   });
		   if(flag == 0){
			   gridStore.sync({
					success: function(ba,op){
					   Ext.Msg.alert("提示","保存合同补充协议成功");
					   gridStore.reload();
				   },
				   failure: function(ba,op){
					   Ext.Msg.alert("提示","保存合同补充协议："+ba.exceptions[0].getError());
				   }
			   }); 
		   }
	   }
    },
    
	// 上传租赁合同附件
    onUploadContractAttachemetClick : function() {
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
        var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
        var olPreSaleOrderNo = (seletedGird[0].modified && (typeof seletedGird[0].modified.olPreSaleOrderNo != 'undefined')) ? seletedGird[0].modified.olPreSaleOrderNo : seletedGird[0].data.olPreSaleOrderNo;
        
        if (!seletedGird || seletedGird.length<=0) {
        	Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑订单信息。');
        	return;
		}
        if (!olPreSaleOrderNo) {
        	Ext.Msg.alert("提示",'租赁合同编号为空或未保存。');
        	return;
        }
        
        var businessKey = olPreSaleOrderNo; // 附件业务实体编号：租赁合同编号
    	var businessType = 'attachBizEntityType_ZLHT'; // 附件业务实体类型：租赁合同代码
    	var businessTypeName = '租赁合同'; // 附件业务实体类型名称：租赁合同（理论上从字典表去nameCn字段）
        
        var uploadAttachmenWin = Ext.create({
			xtype:'UploadAttachmentWin',
			width : 800,
			height : '60%',
			businessKey:businessKey,
			businessType:businessType,
			businessTypeName:businessTypeName,
			closeAction : 'destroy'
		});
		var uploadAttachmentPanel = uploadAttachmenWin.down('#uploadAttachmentPanelItemId');// 附件Panel
		uploadAttachmentPanel.setTitle('');
		uploadAttachmenWin.show();
        
    },
    
    // 上传补充协议
    onUploadBCXYClick : function (grid, rowIndex) {
    	var ccsaGridStore = grid.getStore();
        var rec = ccsaGridStore.getAt(rowIndex);
        var suppleAgreementNo = rec.get('suppleAgreementNo');
        if (!suppleAgreementNo) {
        	Ext.Msg.alert('提示','请先保存补充协议后再进行上传操作！');
        	return;
        }
    	var businessKey = suppleAgreementNo; // 附件业务实体编号：租赁合同编号
    	var businessType = 'attachBizEntityType_ZLHT'; // 附件业务实体类型：租赁合同代码
    	var businessTypeName = '租赁合同'; // 附件业务实体类型名称：租赁合同（理论上从字典表去nameCn字段）
    	
    	var uploadAttachmenWin = Ext.create({
			xtype:'UploadAttachmentWin',
			width : 800,
			height : '60%',
			businessKey:businessKey,
			businessType:businessType,
			businessTypeName:businessTypeName,
			closeAction : 'destroy'
		});
		var uploadAttachmentPanel = uploadAttachmenWin.down('#uploadAttachmentPanelItemId');// 附件Panel
		uploadAttachmentPanel.setTitle('');
		uploadAttachmenWin.show();
    },
    
    // 打印补充协议
    onPrintBCXYClick : function (grid, rowIndex) {
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
        var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
        var olPreSaleOrderNo = (seletedGird[0].modified && (typeof seletedGird[0].modified.olPreSaleOrderNo != 'undefined')) ? seletedGird[0].modified.olPreSaleOrderNo : seletedGird[0].data.olPreSaleOrderNo;
        var contractCarCode = (seletedGird[0].modified && (typeof seletedGird[0].modified.contractCarCode != 'undefined')) ? seletedGird[0].modified.contractCarCode : seletedGird[0].data.contractCarCode;
        var customerName = (seletedGird[0].modified && (typeof seletedGird[0].modified.customerName != 'undefined')) ? seletedGird[0].modified.customerName : seletedGird[0].data.customerName;
        var ccsaGridStore = grid.getStore();
        var rec = ccsaGridStore.getAt(rowIndex);
        var bankAccountName='';
    	var bankAccountNo='';
    	var bankOpenPlace='';
        var bankCardInfoStore = this.getView().getViewModel().getStore('bankCardInfoStore');
        if (bankCardInfoStore && rec.data.bankCardInfoId && bankCardInfoStore.findRecord('id', rec.data.bankCardInfoId)) {
        	var bankCardInfo = bankCardInfoStore.findRecord('id', rec.data.bankCardInfoId).data.bankAccountInfo;
        	var bankCardInfoArray = bankCardInfo.split(' ');
        	if (bankCardInfoArray.length>=3) {
        		bankAccountNo=bankCardInfoArray[0];
        		bankAccountName=bankCardInfoArray[1];
            	bankOpenPlace=bankCardInfoArray[2];
        	}
        }
    	var params='contractNo='+olPreSaleOrderNo+'&'+
    	           'contractCarCode='+contractCarCode+'&'+
    	           'bankAccountName='+bankAccountName+'&'+
    	           'bankAccountNo='+bankAccountNo+'&'+
    	           'bankOpenPlace='+bankOpenPlace+'&'+
    	           'customerName='+customerName;
		window.location.href = 'ccOrder/download/bcxy?'
			+ params;
    },
    
    // 上传车辆及保险信息附件
    onUploadCarBXClick : function (grid, rowIndex) {
    	var ccsaGridStore = grid.getStore();
        var rec = ccsaGridStore.getAt(rowIndex);
        var id = rec.get('id');
        var carInfoCode = rec.get('carInfoCode');
        if (!id || id<0) {
        	Ext.Msg.alert('提示','请先保存补充协议后再进行上传操作！');
        	return;
        }
        if (!carInfoCode) {
        	Ext.Msg.alert('提示','请先配车后再进行上传操作！');
        	return;
        }
    	var businessKey = carInfoCode; // 附件业务实体编号：车辆资产编号
    	var businessType = 'attachBizEntityType_ZCGL'; // 附件业务实体类型：资产管理代码
    	var businessTypeName = '资产管理'; // 附件业务实体类型名称：资产管理（理论上从字典表去nameCn字段）
    	
//    	var uploadCarBXAttachmentPanel = Ext.ComponentQuery.query('#uploadCarBXAttachmentPanelItemId');
//    	var uploadAddBtn = uploadCarBXAttachmentPanel[0].down("#addAttachementBtnItemId");
//    	uploadAddBtn.fireEvent('click');
    	
		var uploadAttachmenWin = Ext.create({
			xtype:'UploadAttachmentWin',
			width : 800,
			height : '60%',
			businessKey:businessKey,
			businessType:businessType,
			businessTypeName:businessTypeName,
			closeAction : 'destroy'
		});
		var uploadAttachmentPanel = uploadAttachmenWin.down('#uploadAttachmentPanelItemId');// 附件Panel
		uploadAttachmentPanel.setTitle('');
		uploadAttachmenWin.show();
    },
    
    // 新增车辆及保险信息（订单详情）
    onAddContractCarOrderDetailClick : function () {
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
    	var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		if (seletedGird && seletedGird.length>0) {
			var id = seletedGird[0].get('id');
			if (!id || id<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行新建车辆及保险信息操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑订单信息。');
			return;
		}
		
		var contractCarOrderId = seletedGird[0].get('id');
		var olPreSaleOrderNo = (seletedGird[0].modified && (typeof seletedGird[0].modified.olPreSaleOrderNo != 'undefined')) ? seletedGird[0].modified.olPreSaleOrderNo : seletedGird[0].data.olPreSaleOrderNo;
		var carProductName = (seletedGird[0].modified && (typeof seletedGird[0].modified.carProductName != 'undefined')) ? seletedGird[0].modified.carProductName : seletedGird[0].data.carProductName;
		var contractCarDisplayName = (seletedGird[0].modified && (typeof seletedGird[0].modified.contractCarDisplayName != 'undefined')) ? seletedGird[0].modified.contractCarDisplayName : seletedGird[0].data.contractCarDisplayName;
		var orderCount = (seletedGird[0].modified && (typeof seletedGird[0].modified.orderCount != 'undefined')) ? seletedGird[0].modified.orderCount : seletedGird[0].data.orderCount;
		var contractCarOrderDetailGrid = this.lookupReference('contractCarOrderDetailGrid');
		var ccodStore = contractCarOrderDetailGrid.getStore();
		if (!olPreSaleOrderNo) {
        	Ext.Msg.alert("提示",'租赁合同编号为空或未保存。');
        	return;
        }
		if (ccodStore.count()>=orderCount) {
			Ext.Msg.alert('提示','调配车辆个数不能多于订单数量！');
			return;
		}
        var newModel = new Evcorp.model.ContractCarOrderDetail({ 
	    	id:null, 
	    	contractCarOrderId:contractCarOrderId, 
	    	olPreSaleOrderNo:olPreSaleOrderNo,
	    	carProductName:carProductName,
	    	carProductDisplayName:contractCarDisplayName,
		});
        ccodStore.insert(0, newModel);
        contractCarOrderDetailGrid.editingPlugin.startEditByPosition({ row: 0, column: 0 });
        contractCarOrderDetailGrid.getSelectionModel().select(newModel);
    },
    
    // 保存车辆及保险信息（订单详情）
    onSaveContractCarOrderDetailClick : function () {
       var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
       var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
       var orderCount = (seletedGird[0].modified && (typeof seletedGird[0].modified.orderCount != 'undefined')) ? seletedGird[0].modified.orderCount : seletedGird[0].data.orderCount;
       var contractCarOrderId = seletedGird[0].get('id');
       
	   var gridStore = this.getView().getViewModel().getStore('contractCarOrderDetailListStore');
	   var modifyArray = gridStore.getModifiedRecords();
	   var contractCarSuppleAgreementListStore = this.getViewModel().getStore('contractCarSuppleAgreementListStore');
	   if(modifyArray.length == 0){
		   Ext.Msg.alert('提示','你未进行任何添加或修改操作');
		   return false;
	   } else if (gridStore.data.length>orderCount) {
		   Ext.Msg.alert('提示','调配车辆个数不能多于订单数量！');
		   return false;
	   } else {
		   var flag = 0;
		   Ext.each(modifyArray, function(obj,index){
			   var id = obj.get('id');
			   if (!id || parseInt(id)<0) { // 新增
				   if (!obj.get('olPreSaleOrderNo')) {
					   flag = 1;
					   Ext.Msg.alert("提示",'请先选择或新建一条订单记录后再编辑车辆及保险信息。');
					   return false;
				   }
			   } else {
				   if (!obj.get('contractCarOrderId')) {
					   flag = 1;
					   Ext.Msg.alert("提示",'请先选择或新建一条订单记录后再编辑车辆及保险信息。');
					   return false;
				   }
			   }
			   if(!obj.get('carInfoId') || !obj.get('carInfoCode') || !obj.get('carFrameNo')){
				   flag = 2;
				   Ext.Msg.alert('提示','缺乏必要配车信息！');
				   return false;
			   }
		   });
		   if(flag == 0) {
			   gridStore.sync({
					success: function(ba,op){
					   Ext.Msg.alert("提示","保存车辆及保险信息成功！");
					   gridStore.reload();
					   // 加载附件补充协议
					   contractCarSuppleAgreementListStore.load({
					    	params:{ contractCarOrderId: contractCarOrderId  }
					   });
				   },
				   failure: function(ba,op){
					   Ext.Msg.alert("提示","保存车辆及保险信息失败："+ba.exceptions[0].getError());
				   }
			   }); 
		   }
	   }
    },
    
    // 配车
    onAllocationCarClick : function () {
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		var g = Ext.ComponentQuery.query('#contractCarOrderDetailItem')[0];
		var gm = g.getSelectionModel().getSelection();
		if (seletedGird && seletedGird.length>0 && gm && gm.length>0) {
			var id = seletedGird[0].get('id');
			if (!id || id<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行新建车辆及保险信息操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑车辆及保险信息。');
			return;
		}
		
		var carProductCode = (seletedGird[0].modified && (typeof seletedGird[0].modified.carProductCode != 'undefined')) ? seletedGird[0].modified.carProductCode : seletedGird[0].data.carProductCode;
        var window = Ext.create({
			xtype : 'carInfolistwin',
			width : 1000,
			closeAction : 'destroy'
		});
		window.getViewModel().getStore('carInfoGridWinStore').getProxy().extraParams = {
			contractCarCode : carProductCode,
			status : 1, // 未租
		};
		window.show();
		window.down('#selectCarInfoId').on({
			click : function () {
				var carInfoWinGrid = Ext.ComponentQuery.query('#carInfoWinGridId')[0];
				var seletedModels = carInfoWinGrid.getSelectionModel().getSelection();
				if (!seletedModels || seletedModels.length<=0) {
					Ext.Msg.alert("提示",'请选择车辆信息！');
					return;
				}
				
//				var suppleAgreementNo = seletedModels[0].get('suppleAgreementNo'); //补充协议编号
				var carProductName = seletedModels[0].get('carProductName'); //车辆名称
				var carProductDisplayName = seletedModels[0].get('carProductDisplayName'); // 车辆显示名称
				var carFrameNo = seletedModels[0].get('carFrameNo'); //车架号
				var carLicensePlate = seletedModels[0].get('carLicensePlate'); //车牌号码
				var carEngineNo = seletedModels[0].get('carEngineNo'); //发动机号
				var carDriveLicenseNo = seletedModels[0].get('carDriveLicenseNo'); //行驶证号
				var initMileage = seletedModels[0].get('initMileage'); //初始里程数
				var insuranceCompany = seletedModels[0].get('insuranceCompany'); //保险公司
				var strongInsuranceId = seletedModels[0].get('strongInsuranceId'); //交强险保单ID
				var strongInsuranceNo = seletedModels[0].get('strongInsuranceNo'); //交强险保单编号
				var strongInsuranceStartDate = seletedModels[0].get('strongInsuranceStartDate'); //交强险起始日期
				var strongInsuranceEndDate = seletedModels[0].get('strongInsuranceEndDate'); //交强险终止日期
				var gpsDeviceNo = seletedModels[0].get('gpsDeviceNo'); //GPS设备编号
				var commercialInsuranceId = seletedModels[0].get('commercialInsuranceId'); //商业险保单ID
				var commercialInsuranceNo = seletedModels[0].get('commercialInsuranceNo'); //商业险保单编号
				var commercialInsuranceStartDate = seletedModels[0].get('commercialInsuranceStartDate'); //商业险起始日期
				var commercialInsuranceEndDate = seletedModels[0].get('commercialInsuranceEndDate'); //商业险终止日期
				var carInfoCode = seletedModels[0].get('carInfoCode'); // 车辆资产编号
				var carInfoId = seletedModels[0].get('id'); // 车辆资产ID
				var comInsuranceCompany = seletedModels[0].get('comInsuranceCompany'); //商业保险公司
				var comInsuranceYear = seletedModels[0].get('comInsuranceYear'); //商业保险年份
				
				var carInfo=gm[0].data;
				var gridStore=g.getStore().getById(gm[0].data.id);
//				gridStore.set('suppleAgreementNo',suppleAgreementNo);
				gridStore.set('carInfoId',carInfoId);
				gridStore.set('carInfoCode',carInfoCode);
				gridStore.set('carFrameNo',carFrameNo);
				gridStore.set('carLicensePlate',carLicensePlate);
				gridStore.set('carEngineNo',carEngineNo);
				gridStore.set('carDriveLicenseNo',carDriveLicenseNo);
				gridStore.set('initMileage',initMileage);
				gridStore.set('insuranceCompany',insuranceCompany);
				gridStore.set('strongInsuranceId',strongInsuranceId);
				gridStore.set('strongInsuranceNo',strongInsuranceNo);
				gridStore.set('strongInsuranceStartDate',strongInsuranceStartDate?strongInsuranceStartDate.substring(0, 10):null);
				gridStore.set('strongInsuranceEndDate',strongInsuranceEndDate?strongInsuranceEndDate.substring(0, 10):null);
				gridStore.set('gpsDeviceNo',gpsDeviceNo);
				gridStore.set('commercialInsuranceId',commercialInsuranceId);
				gridStore.set('commercialInsuranceNo',commercialInsuranceNo);
				gridStore.set('commercialInsuranceCompany',comInsuranceCompany);
				gridStore.set('commercialInsuranceYear',comInsuranceYear);
				gridStore.set('commercialInsuranceStartDate',commercialInsuranceStartDate?commercialInsuranceStartDate.substring(0, 10):null);
				gridStore.set('commercialInsuranceEndDate',commercialInsuranceEndDate?commercialInsuranceEndDate.substring(0, 10):null);
				window.close();
			}
		})

    },
    
    // 取消配车
    onCancelAllocationCarClick : function() {
		var g = this.lookupReference('contractCarOrderDetailGrid');
		var gm = g.getSelectionModel().getSelection();
		var id = gm[0].data.id;
		var contractCarOrderId = gm[0].data.contractCarOrderId;
		var gridStore=g.getStore();
		var selectGridStore=gridStore.getById(id);
		var contractCarSuppleAgreementListStore = this.getViewModel().getStore('contractCarSuppleAgreementListStore');
    	if (id && id>=0) {
    		Ext.MessageBox.confirm('提示', '确定取消配车，此配车信息对应的租赁合同补充协议也将被删除?', function(btn) {
				if (btn != 'yes') {
					return;
				}
				// 删除操作
				Ext.Ajax.request({
					url : 'ccOrder/deleteContractCarOrderDetail',
					params : {
						'id' : id,
					},
					async : false,
					success : function(response) {
						if(response.status==200 && response.statusText=='OK'){
							Ext.Msg.alert("提示","取消配车成功！")
							gridStore.reload();
							// 加载附件补充协议
				    		contractCarSuppleAgreementListStore.load({
						    	params:{ contractCarOrderId: contractCarOrderId  }
					    	});
						}else{
	                		Ext.Msg.alert("提示","系统错误,操作失败!");
	                	}
					}
				});
			});
    	} else {
    		gridStore.remove(gm);
    	}
	},
	// 购买商业保险
	onBuycommercialInsuranceClick : function () {
		
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		if (seletedGird && seletedGird.length>0) {
			var id = seletedGird[0].get('id');
			if (!id || id<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行购买车辆商业保险操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑车辆及保险信息。');
			return;
		}
		
		var contractCarOrderDetailGrid = this.lookupReference('contractCarOrderDetailGrid');
		var seletedCCODGrid = contractCarOrderDetailGrid.getSelectionModel().getSelection();
		if (seletedCCODGrid && seletedCCODGrid.length>0) {
			var carInfoId = seletedCCODGrid[0].data.carInfoId;
			if (!carInfoId || carInfoId<0) {
				Ext.Msg.alert("提示",'请先配车后再进行购买车辆商业保险操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择进行购买车辆商业保险操作的车辆信息。');
			return;
		}
		var window = Ext.create({
			xtype : 'contractinsuranceinfowin',
			width : 400,
			height : 300,
			closeAction : 'destroy',
		});
		window.down('#carInfoItemId').setValue(seletedCCODGrid[0].data.carInfoId);
		window.down('#idItemId').setValue(seletedCCODGrid[0].data.commercialInsuranceId);
		window.down('#insuranceNoItemId').setValue(seletedCCODGrid[0].data.commercialInsuranceNo);
		window.down('#insuranceCompanyItemId').setValue(seletedCCODGrid[0].data.commercialInsuranceCompany);
		window.down('#insuranceYearItemId').setValue(seletedCCODGrid[0].data.commercialInsuranceYear);
		window.down('#typeItemId').setValue('2'); // 商险
		window.down('#startDateItemId').setValue(seletedCCODGrid[0].data.commercialInsuranceStartDate);
		window.down('#endDateItemId').setValue(seletedCCODGrid[0].data.commercialInsuranceEndDate);
		window.down('#isValidItemId').setValue('1'); // 生效
		window.show();
		
		window.down('#saveInsuranceAddItemId').on({
			click : function () {
				// 保险信息非空验证
				var insuranceForm = window.down('#contranctInsuranceFormItemId').getForm();
				var fieldValues = insuranceForm.getFieldValues();
				if (!insuranceForm.isValid()) {
					Ext.Msg.alert("提示", '请把信息填完整');
					return;
				}
				
				var commercialInsuranceId = fieldValues.id; //商业险保单ID
				var commercialInsuranceNo = fieldValues.insuranceNo; //商业险保单编号
				var commercialInsuranceCompany = fieldValues.insuranceCompany; //商业险保险公司
				var commercialInsuranceYear = fieldValues.insuranceYear; //商业险保单编号
				var commercialInsuranceStartDate = Ext.util.Format.date(fieldValues.startDate, 'Y-m-d'); //商业险起始日期
				var commercialInsuranceEndDate = Ext.util.Format.date(fieldValues.endDate, 'Y-m-d'); //商业险终止日期
				
				var carInfo=seletedCCODGrid[0].data;
				var gridStore=contractCarOrderDetailGrid.getStore().getById(seletedCCODGrid[0].data.id);
				gridStore.set('commercialInsuranceId',commercialInsuranceId);
				gridStore.set('commercialInsuranceCompany',commercialInsuranceCompany);
				gridStore.set('commercialInsuranceNo',commercialInsuranceNo);
				gridStore.set('commercialInsuranceYear',commercialInsuranceYear);
				gridStore.set('commercialInsuranceStartDate',commercialInsuranceStartDate?commercialInsuranceStartDate.substring(0, 10):null);
				gridStore.set('commercialInsuranceEndDate',commercialInsuranceEndDate?commercialInsuranceEndDate.substring(0, 10):null);
				window.close();
			}
		})

    },
	insuranceCompanyEditor:function(value){
		if(value){
			var insuranceCompanyStore=this.getView().getViewModel().getStore('insuranceCompanyStore');
			return insuranceCompanyStore.findRecord('code', value).data.nameCn;
		} else {
			return '';
		}
	},
	onDownContractClick:function(){
		var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
        var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
        var olPreSaleOrderNo = (seletedGird[0].modified && (typeof seletedGird[0].modified.olPreSaleOrderNo != 'undefined')) ? seletedGird[0].modified.olPreSaleOrderNo : seletedGird[0].data.olPreSaleOrderNo;
		if (!olPreSaleOrderNo) {
        	Ext.Msg.alert("提示",'租赁合同编号为空或未保存。');
        	return;
        }
        var customerName = (seletedGird[0].modified && (typeof seletedGird[0].modified.customerName != 'undefined')) ? seletedGird[0].modified.customerName : seletedGird[0].data.customerName;
        var dingJinFee = (seletedGird[0].modified && (typeof seletedGird[0].modified.dingJinFee != 'undefined')) ? seletedGird[0].modified.dingJinFee : seletedGird[0].data.dingJinFee;
        dingJinFee = dingJinFee == null ? '' : dingJinFee;
		window.location.href = 'ccOrder/download/contract?olPreSaleOrderNo='+olPreSaleOrderNo+'&customerName='+customerName+'&dingJinFee='+dingJinFee;
	},
	bankCardInfoEditor:function(value){
		if(value){
			var bankCardInfoStore=this.getView().getViewModel().getStore('bankCardInfoStore');
			if (bankCardInfoStore.findRecord('id', value)) {
				return bankCardInfoStore.findRecord('id', value).data.bankAccountInfo;
			}
			return '';
		} else {
			return '';
		}
	},
	
	// 导入还款计划
	onImportReplaymentPlanClick:function (field, value) {
		var ccsaReplaymentPlanGrid = this.lookupReference('ccsaReplaymentPlanGrid');
		var seletedGird = ccsaReplaymentPlanGrid.getSelectionModel().getSelection();
		var contractCarOrderId = null;
		var suppleAgreementId = null;
		if (seletedGird && seletedGird.length>0) {
			contractCarOrderId = seletedGird[0].get('contractCarOrderId');
			suppleAgreementId = seletedGird[0].data.id;
			if (!contractCarOrderId || contractCarOrderId<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行导入还款计划信息操作。');
				return;
			}
			if (!suppleAgreementId || suppleAgreementId<0) {
				Ext.Msg.alert("提示",'请先选择车辆再进行导入还款计划信息操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择车辆再进行导入还款计划信息操作。');
			return;
		}
		if (!this.lookupReference('fileUploadRef').value) {
			Ext.Msg.alert("提示",'请选择要导入的还款计划文件！');
			return;
		}
    	var replaymentPlanForm = this.lookupReference('replaymentPlanForm');
    	var gridStore = this.getViewModel().getStore('replaymentPlanListStore');
    	replaymentPlanForm.getForm().submit({
    		params : {
				contractCarOrderId : contractCarOrderId,
				suppleAgreementId : suppleAgreementId,
			},
            waitMsg: '正在导入...',
            success: function(form, action) {
            	if(action.result.info == null){
            		Ext.Msg.alert("提示", '导入成功！');
            		gridStore.load({
        		    	params:{ suppleAgreementId: suppleAgreementId}
        	    	});
            	}else{
            		Ext.Msg.alert("提示",action.result.info);
            	}
            },
			failure : function(form, action) {
				Ext.Msg.alert('提示',action.result.info);
			}
        });
	},
	
	// 下载还款计划导入模板
	onDownReplaymentPlanClick:function () {
		window.open('ccOrder/downloadTempFile?fileName=还款计划导入模板');
	},
	//启动流程
	onStartWorkflowClick:function(){
		var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		var contractCarOrderId = null;
		if (seletedGird && seletedGird.length>0) {
			contractCarOrderId = seletedGird[0].get('id');
			if (!contractCarOrderId || contractCarOrderId<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行启动流程操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑订单信息。');
			return;
		}
		var pp = this.getView();
		pp.mask("请稍等，正在处理中...","x-mask-loading");
		Ext.Ajax.request({
			url : 'ccOrder/startCcOrderWorkflow',
			params : {
				ccOrderId:contractCarOrderId
			},
			success : function(data) {
				pp.unmask();
				if(data.responseText=='success'){
					Ext.Msg.alert("提示",'流程启动成功');
				}else if (data.responseText=='failure'){
					Ext.Msg.alert("提示",'该订单流程已启动,请勿重复启动');
				} else if (data.responseText=='olPreSaleOrderNo'){
					Ext.Msg.alert("提示", '请先填写并保存租赁合同编号后再启动流程！');
				} else if (data.responseText=='olPreSaleOrderSignDate') {
					Ext.Msg.alert("提示", '请先填写并保存租赁合同签订日期后再启动流程！');
				}
			}
      });
	},
	
	// 初始化银行卡下拉框
	initBankCardInfoCombo:function(){
		var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var record = contractCarOrderGrid.getSelectionModel().getSelection()[0];
		var customerCode = (record.modified && (typeof record.modified.customerCode != 'undefined')) ? record.modified.customerCode : record.data.customerCode;
    	var typeStore = this.getView().getViewModel().getStore('bankCardInfoStore');
    	typeStore.load({params:{customerCode:customerCode}});
    },
    
    // 还款计划选中项中，补充协议选中事件
    onCcsaReplaymentPlanGridSelect : function (grid, record, index) {
		
    	var contractCarOrderPayLogGrid = this.lookupReference('contractCarOrderPayLogGrid');
    	var suppleAgreementId = record.data.id;

    	if(suppleAgreementId != null ){
    		// 加载还款计划
    		var replaymentPlanListStore = this.getViewModel().getStore('replaymentPlanListStore');
    		replaymentPlanListStore.load({
		    	params:{ suppleAgreementId: suppleAgreementId}
	    	});
    	}
    	
    },
    
    // 取消流程
    onCancelClick : function () {
    	var contractCarOrderGrid = this.lookupReference('contractCarOrderGrid');
		var seletedGird = contractCarOrderGrid.getSelectionModel().getSelection();
		if (seletedGird && seletedGird.length>0) {
			var id = seletedGird[0].get('id');
			if (!id || id<0) {
				Ext.Msg.alert("提示",'请先保存订单信息后再进行取消操作。');
				return;
			}
		} else {
			Ext.Msg.alert("提示",'请先选择或新建一条记录后再进行取消操作。');
			return;
		}
		
		var window = Ext.create({
			xtype : 'CancelProcessWin',
			width : 400,
			height : 165,
			closeAction : 'destroy',
		});
		window.down('#contractCarOrderIdItemId').setValue(seletedGird[0].data.id);
		window.show();
		
		window.down('#saveCancelProcessOKBtn').on({
			click : 'saveCancelProcessClick',
		})
    },
    
    // 重置
	onResetQuery:function() {
		var queryForm = this.lookupReference('contractCarOrderQueryForm');
		queryForm.reset();
	},
    
});
