/*
 * File: app/view/menu/menuPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Evcorp.view.contractCar.CustomerInfoWinViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.customerInfowin',
    onModifyClick: function (){
        var customerForm = this.lookupReference('form');
     	var customer = Ext.create('Evcorp.model.Customer',  customerForm.getForm().getValues());
     	var customerId = customerForm.getForm().getValues().id;
     	var userType = customerForm.getForm().getValues().userType;
     	 
     	if(!customerId){
       	   Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑角色资料。');
       	   return;
       	}
     	
     	if(!customerForm.isValid()){
    		Ext.Msg.alert('提示','提交的字段必输项不能为空。');
    		return;
    	}
     	
     	if (!userType) {
     		Ext.Msg.alert('提示','请选择客户用户类型！');
     		return;
     	}
      
       customerForm.getForm().submit({
    	   waitMsg: '正在提交请稍后...', 
    	  
           success: function (form, action) {
        	 
   		  	
		   },
		   failure: function (form, action) {
		        Ext.Msg.alert('failure','Failure');
		   } 
       });
    },
	  // 新建银行卡
    onBankCardInfoAddClick : function() {
    	var win = this.getView();
		var customerId = win.down('form').getForm().getValues().id;
		console.log(customerId);
		var bankCardInfoGrid = win.lookupReference('bankCardInfoGrid');
		var bankCardInfoGridStore = bankCardInfoGrid.getStore(); 
		var newModel = new Evcorp.model.BankCardInfo({ id:null, customerId:customerId });
		bankCardInfoGridStore.insert(0, newModel);
		bankCardInfoGrid.getSelectionModel().select(newModel);
			
    },
	  // 银行卡信息保存
	  onBankCardInfoSaveClick : function(grid, rowIndex) {
	
		  var grdiStore = grid.getStore();
		  
		  var rec = grdiStore.getAt(rowIndex);
		  var id = rec.get('id');
		  var customerId = rec.get('customerId');
		  var bankAccountName = Ext.util.Format.trim(rec.get('bankAccountName'));
		  var bankAccountNo = Ext.util.Format.trim(rec.get('bankAccountNo'));
		  var bankOpenPlace = Ext.util.Format.trim(rec.get('bankOpenPlace'));
		  if (!customerId) {
		  	Ext.Msg.alert("提示",'请先选择或新建一条客户记录后再编辑银行卡信息。');
		  	return;
		  }
		  if (!bankAccountName || !bankAccountNo || !bankOpenPlace) {
		  	Ext.Msg.alert("提示",'请输入银行卡必填信息！');
		  	return;
		  }
		  // 新增、修改操作
		  Ext.Ajax.request({
				url : 'customer/saveOrUpdateBankCardInfo',
				params : {
					"id":id,
					"customerId":customerId,
					"bankAccountName":bankAccountName,
					"bankAccountNo":bankAccountNo,
					"bankOpenPlace":bankOpenPlace,
				},
				async : false,
				success : function(response) {
					if(response.status==200 && response.statusText=='OK'){
						var result = JSON.parse(response.responseText);
						var type = result.type;
						var errorMsg = result.errorMsg;
						if (errorMsg) {
							Ext.Msg.alert("提示", errorMsg);
						} else {
							if (type < 0) {
								Ext.Msg.alert("提示","新增成功！")
							} else {
								Ext.Msg.alert("提示","修改成功！")
							}
							grdiStore.reload();
						}
					}else{
		          		Ext.Msg.alert("提示","系统错误,操作失败!");
		          	}
				}
		  });
	},
	// 银行卡信息删除
	onBankCardInfoRemoveClick : function(grid, rowIndex) {
	    var grdiStore = grid.getStore();
	    
	    var rec = grdiStore.getAt(rowIndex);
	    var id = rec.get('id');
	    var customerId = rec.get('customerId');
	    if (!customerId) {
	    	Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑银行卡信息。');
	    	return;
	    }
		if (id && id>=0) {
			Ext.MessageBox.confirm('提示', '确定删除该记录?', function(btn) {
				if (btn != 'yes') {
					return;
				}
				// 删除操作
				Ext.Ajax.request({
					url : 'customer/deleteBankCardInfo',
					params : {
						'id' : id,
					},
					async : false,
					success : function(response) {
						if(response.status==200 && response.statusText=='OK'){
							var responseText = JSON.parse(response.responseText);
							if (responseText.result=='failure' && responseText.errorMsg) {
								Ext.Msg.alert("提示", responseText.errorMsg)
							} else {
								Ext.Msg.alert("提示","删除成功！")
								grdiStore.reload();
								var seletedGird = customerGrid.getSelectionModel().getSelection();
								var customerCode = seletedGird[0].data.cusCode;
								var bankCardInfoStore = Ext.ComponentQuery.query("viewport orderlistpanel")[0].viewModel.getStore('bankCardInfoStore');
								bankCardInfoStore.load({
									params:{customerCode:customerCode}
								});
							}
						}else{
	                		Ext.Msg.alert("提示","系统错误,操作失败!");
	                	}
					}
				});
			});
		} else {
			grdiStore.removeAt(rowIndex);
		}
	},
	
	// 上传银行卡信息附件
	onUploadBankCardInfoClick : function (grid, rowIndex) {
		var ccsaGridStore = grid.getStore();
	    var rec = ccsaGridStore.getAt(rowIndex);
	    var id = rec.get('id');
	    var bankAccountNo = rec.get('bankAccountNo');
	    if (!id || id<0) {
	    	Ext.Msg.alert('提示','请先保存银行卡后再进行上传操作！');
	    	return;
	    }
	    if (!bankAccountNo) {
	    	Ext.Msg.alert('提示','银行卡帐号为空，无法进行上传操作！');
	    }
	    var businessKey = bankAccountNo; // 附件业务实体编号：银行卡卡号
    	var businessType = 'attachBizEntityType_YHK'; // 附件业务实体类型：银行卡代码
    	var businessTypeName = '银行卡'; // 附件业务实体类型名称：银行卡（理论上从字典表去nameCn字段）
		
    	var uploadAttachmenWin = Ext.create({
			xtype:'UploadAttachmentWin',
			width : 800,
			height : '60%',
			businessKey:businessKey,
			businessType:businessType,
			businessTypeName:businessTypeName,
			closeAction : 'destroy'
		});
		var uploadAttachmentPanel = uploadAttachmenWin.down('#uploadAttachmentPanelItemId');// 附件Panel
		uploadAttachmentPanel.setTitle('');
		uploadAttachmenWin.show();
	}
});
