/*
 * File: app/view/menu/menuPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Evcorp.view.contractCar.PayInfoWinViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.PayInfoWin',
    initWindow:function(){
    	var win = this.getView();
    	var olPreSaleOrderNo = '';
    	var store = win.getViewModel().getStore('detail');
		if(store!=null){
			store.load({
				params:{businessKey:win.businessKey},
				callback: function(rr, operation, success) {
					if(success){
						olPreSaleOrderNo = rr[0].data.olPreSaleOrderNo;
						var orderListDetailPanel = win.down('orderlistdetails');
						var orderDetailTab = orderListDetailPanel.lookupReference('orderDetailTab');
						orderDetailTab.tabBar.items.items[2].hide();
						if(orderListDetailPanel!=null){
							var contractCarOrderDetailListStore = orderListDetailPanel.getViewModel().getStore('contractCarOrderDetailListStore');
							if(contractCarOrderDetailListStore!=null)
								contractCarOrderDetailListStore.load({params:{orderNo:win.businessKey}});
				    		var replaymentPlanListStore = orderListDetailPanel.getViewModel().getStore('replaymentPlanListStore');
				    		if(replaymentPlanListStore!=null)
					    		replaymentPlanListStore.load({params:{orderNo: win.businessKey}});
				    		var contractCarSuppleAgreementListStore = orderListDetailPanel.getViewModel().getStore('contractCarSuppleAgreementListStore');
							if(contractCarSuppleAgreementListStore!=null){
								contractCarSuppleAgreementListStore.load({params:{orderNo: win.businessKey}});
							}
							var contractCarOrderPayLogListStore = win.getViewModel().getStore('contractCarOrderPayLogListStore');
				    		if(contractCarOrderPayLogListStore!=null){
				    			contractCarOrderPayLogListStore.load({
					    	    	params:{orderNo:win.businessKey},
					        	});
							}
						}
//						Ext.Ajax.request({
//							url : 'ccOrder/calNeedCollectedAmount',
//							params : {
//								orderNo : win.businessKey,
//							},
//							async : false,
//							success : function(response) {
//								var needToCollectId = Ext.ComponentQuery.query('#needToCollectId')[0];
//								needToCollectId.setValue(response.responseText);
//							}
//						});
						
						var totalAmountReceivableForFirstPayment = win.lookupReference('totalAmountReceivableForFirstPaymentRef');
						totalAmountReceivableForFirstPayment.setValue(rr[0].data.totalAmountReceivableForFirstPayment);
					}
			    }
			});
		}
    },
    onPayAddClick : function() {
    	var win = this.getView();
    	var orderListDetailPanel = win.down('orderlistdetails');
    	var form = orderListDetailPanel.lookupReference('taskDetailForm');
		var contractCarOrderId = form.getForm().getValues().id
		
		var contractCarOrderPayLogGrid = this.lookupReference('contractCarOrderPayLogGrid');
        var contractCarOrderPayLogGridStore = contractCarOrderPayLogGrid.getStore(); 
        var newModel = new Evcorp.model.ContractCarOrderPayLog({ id:null, contractCarOrderId:contractCarOrderId });
        contractCarOrderPayLogGridStore.insert(0, newModel);
        
        contractCarOrderPayLogGrid.getSelectionModel().select(newModel);
		
	},
	// 支付信息保存
	onContractCarOrderPaySaveClick : function(grid, rowIndex) {

	  var contractCarOrderPayLogGridStore = grid.getStore();
      
      var rec = contractCarOrderPayLogGridStore.getAt(rowIndex);
      var id = rec.get('id');
      var contractCarOrderId = rec.get('contractCarOrderId');
      var payNo = Ext.util.Format.trim(rec.get('payNo'));
      var payType = Ext.util.Format.trim(rec.get('payType'));
      var payChannel = Ext.util.Format.trim(rec.get('payChannel'));
      var payAmount = rec.get('payAmount');
      var payTime = rec.get('payTime');
      var remark = Ext.util.Format.trim(rec.get('remark'));
      if (!contractCarOrderId) {
      	Ext.Msg.alert("提示",'请先选择或新建一条订单记录后再编辑支付信息。');
      	return;
      }
      if (!payNo || !payType || !payChannel || !payAmount || !payTime) {
      	Ext.Msg.alert("提示",'请输入合法支付信息！');
      	return;
      }
      payTime = Ext.util.Format.date(payTime, 'Y-m-d');
      // 新增、修改操作
      Ext.Ajax.request({
			url : 'ccOrder/saveOrUpdateContractCarOrderPayLog',
			params : {
				"id":id,
				"payNo":payNo,
				"payType":payType,
				"payChannel":payChannel,
				"payAmount":payAmount,
				"payTime":payTime,
				"remark":remark,
				"contractCarOrderId":contractCarOrderId
			},
			async : false,
			success : function(response) {
				if(response.status==200 && response.statusText=='OK'){
					var result = JSON.parse(response.responseText);
					var type = result.type;
					var errorMsg = result.errorMsg;
					if (errorMsg) {
						Ext.Msg.alert("提示", errorMsg);
					} else {
						if (type < 0) {
							Ext.Msg.alert("提示","新增成功！")
						} else {
							Ext.Msg.alert("提示","修改成功！")
						}
						contractCarOrderPayLogGridStore.reload();
					}
				}else{
	          		Ext.Msg.alert("提示","系统错误,操作失败!");
	          	}
			}
      });
	},
	// 支付信息删除
	onContractCarOrderPayRemoveClick : function(grid, rowIndex) {
        var contractCarOrderPayLogGridStore = grid.getStore();
        
        var rec = contractCarOrderPayLogGridStore.getAt(rowIndex);
        var id = rec.get('id');
        var contractCarOrderId = rec.get('contractCarOrderId');
        if (!contractCarOrderId) {
        	Ext.Msg.alert("提示",'请先选择或新建一条记录后再编辑支付信息。');
        	return;
        }
    	if (id && id>=0) {
    		Ext.MessageBox.confirm('提示', '确定删除该记录?', function(btn) {
				if (btn != 'yes') {
					return;
				}
				// 删除操作
				Ext.Ajax.request({
					url : 'ccOrder/deleteContractCarOrderPayLog',
					params : {
						'contractCarOrderPayLogId' : id,
					},
					async : false,
					success : function(response) {
						if(response.status==200 && response.statusText=='OK'){
							Ext.Msg.alert("提示","删除成功！")
							contractCarOrderPayLogGridStore.reload();
						}else{
	                		Ext.Msg.alert("提示","系统错误,操作失败!");
	                	}
					}
				});
			});
    	} else {
    		contractCarOrderPayLogGridStore.removeAt(rowIndex);
    	}
	},
	orderPayTypeEditor : function (value) {
    	if(value){
    		var gridStore = this.getView().getViewModel().getStore('orderPayTypeStore');
        	return gridStore.findRecord('code', value).data.nameCn;
    	}
    },
    orderPayChannelEditor : function (value) {
    	if(value){
    		var gridStore = this.getView().getViewModel().getStore('orderPayChannelStore');
        	return gridStore.findRecord('code', value).data.nameCn;
    	}
    },
    onSubmitClick:function(){
    	var win = this.getView();
    	var taskId = win.taskId;
    	var processInstanceId = win.processInstanceId;
    	var businessKey = win.businessKey;
    	var totalAmountReceivableForFirstPayment = this.lookupReference('totalAmountReceivableForFirstPaymentRef');
    	win.mask("请稍等，正在处理中...","x-mask-loading");
    	Ext.Ajax.request({
			url : 'ccOrder/payPoundageSubmit',
			params : {
				taskId : taskId,
				processInstanceId : processInstanceId,
				businessKey : businessKey,
				totalAmountReceivableForFirstPayment:totalAmountReceivableForFirstPayment.getValue()
			},
            method: 'POST',	
			success : function(data) {
				win.unmask();
				if(data.responseText=='success'){
					Ext.Msg.alert("提示",'提交成功',function(){
		    			var myActiveTaskGrid = Ext.ComponentQuery.query('#myActiveTaskGrid')[0];
		    			var myActiveTaskStore = myActiveTaskGrid.getStore();
		    			myActiveTaskStore.loadPage(1 ,{"start":0,"limit":20});
		    			var eastPanel = Ext.ComponentQuery.query("#eastPanelId")[0];
		    	        eastPanel.removeAll();
		    			win.close();
		    		});
				}else{
					Ext.Msg.alert("提示",'请先保存支付记录');
				}
			}
		});
    },
 // 上传支付信息附件
	onUploadContractCarOrderPayClick : function (grid, rowIndex) {
    	var ccsaGridStore = grid.getStore();
        var rec = ccsaGridStore.getAt(rowIndex);
        var id = rec.get('payNo');
        var payNo = rec.get('payNo');
        if (!id || id<0) {
        	Ext.Msg.alert('提示','请先保存补充协议后再进行上传操作！');
        	return;
        }
        if (!payNo) {
        	Ext.Msg.alert('提示','支付编码为空，无法进行上传操作！');
        }
    	var businessKey = payNo; // 附件业务实体编号：支付编号
    	var businessType = 'attachBizEntityType_ZFXX'; // 附件业务实体类型：支付类型代码
    	var businessTypeName = '支付信息'; // 附件业务实体类型名称：支付类型（理论上从字典表去nameCn字段）
    	
    	var uploadAttachmenWin = Ext.create({
			xtype:'UploadAttachmentWin',
			width : 800,
			height : '60%',
			businessKey:businessKey,
			businessType:businessType,
			businessTypeName:businessTypeName,
			closeAction : 'destroy'
		});
		var uploadAttachmentPanel = uploadAttachmenWin.down('#uploadAttachmentPanelItemId');// 附件Panel
		uploadAttachmentPanel.setTitle('');
		uploadAttachmenWin.show();
    }
});
